using System.Text;
using MeowLib.Domain.Models;
using MeowLIb.WebApi.Services.Interface;
using Telegram.Bot;

namespace MeowLIb.WebApi.Services.Implementation.Production;

public class FrontEndLogService : IFrontEndLogService
{
    private readonly TelegramBotClient _botClient;
    private readonly long _chatId;

    public FrontEndLogService()
    {
        // change to cfg
        var botToken = "0";
        var chatId = -1001781472659;

        _botClient = new TelegramBotClient(botToken);

        _chatId = chatId;
    }

    public async Task LogAsync(string userLogin, ErrorLogInfoModel errorData)
    {
        var additionalInfoStringBuilder = new StringBuilder();

        if (errorData.AdditionalInfo is not null && errorData.AdditionalInfo.Any())
        {
            additionalInfoStringBuilder.AppendLine("ü¶Ñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n");
            foreach (var (param, message) in errorData.AdditionalInfo)
            {
                additionalInfoStringBuilder.AppendLine($"- {param}: {message}");
            }
        }

        var isApiError = errorData.IsApiError ? "–î–∞" : "–ù–µ—Ç";
        var textToSend = "[–õ–æ–≥ | FrontEnd]\n\n" +
                         $"üìÖ –î–∞—Ç–∞: {DateTime.Now}\n\n" +
                         $"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: {errorData.Message}\n\n" +
                         $"üì¶ –ú–æ–¥—É–ª—å –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {errorData.ErrorModule}\n\n" +
                         $"üë§ –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {userLogin}\n\n" +
                         $"üï∑Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ c Api: {isApiError}\n\n" +
                         $"{additionalInfoStringBuilder}";

        await _botClient.SendTextMessageAsync(_chatId, textToSend);
    }
}